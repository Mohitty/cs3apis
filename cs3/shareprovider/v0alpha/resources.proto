// CS3 APIS
// Copyright (C) 2018-2019 CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.shareproviderv0alpha;

option csharp_namespace = "CS3.ShareProviderV0Alpha";
option go_package = "shareproviderv0alphapb";
option java_multiple_files = true;
option java_outer_classname = "ResourcesProto";
option java_package = "com.cs3.shareproviderv0alpha";
option objc_class_prefix = "CBOXSHAREPROVIDER";
option php_namespace = "CS3\\ShareProviderV0Alpha";

import "cs3/storageprovider/v0alpha/resources.proto";
import "cs3/types/types.proto";

// The permissions for a share.
message SharePermissions {
  cs3.storageproviderv0alpha.ResourcePermissions resource_permissions = 1;
  // TODO(labkode): additional permissions for shares like re-sharing

}

// Shares are relationships between a resource owner 
// (usually the authenticated user) who grants permissions to a recipient (grantee) 
// on a specified resource (resource_id).
message Share {
  // REQUIRED.
  // Opaque unique identifier of the share.
  ShareId id = 1;
  // REQUIRED.
  // Unique identifier of the shared resource.
  cs3.storageproviderv0alpha.ResourceId resource_id = 2;
  // REQUIRED.
  // Permissions for the grantee to use 
  // the resource.
  SharePermissions permissions = 3;
  // REQUIRED.
  // The receiver of the share, like a user, group ...
  cs3.storageproviderv0alpha.Grantee grantee = 4;
  // REQUIRED.
  // Uniquely identifies the owner of the share 
  // (the resource owner at the time of creating the share).
  // In case the ownership of the underlying resource changes
  // the share owner field MAY change to reflect the change of ownsership.
  string owner = 5;
  // REQUIRED.
  // Uniquely identifies a principal who initiates the share creation.
  // A creator can create shares on behalf of the owner (because of re-sharing, 
  // because belonging to special groups, ...).
  // Creator and owner often result in being the same principal.
  string creator = 6;
  // REQUIRED.
  // Creation time of the share.
  cs3.types.Timestamp ctime = 7;
  // REQUIRED.
  // Last modification time of the share.
  cs3.types.Timestamp mtime = 8;
  // OPTIONAL.
  // Display name for the shared resource (such as file, directory basename or any 
  // user defined name).
  // The display name MAY be different than the actual resource basename.
  // This field is only useful for informational purposes.
  string display_name = 9;
}

// A received share is the share that a grantee will receive.
// It expands the original share by adding state to the share, 
// a display name from the perspective of the grantee and a 
// resource mount path in case the share will be mounted
// in a path in a storage provider.
message ReceivedShare {
  // REQUIRED.
  Share share = 1;
  // REQUIRED.
  // The state of the share.
  ShareState state = 2;
  // OPTIONAL.
  // The storage provider path for the share to be mounted
  // in one of the available storage providers of the user.
  string mount_path = 3;
  // OPTIONAL.
  // Display name for the shared resource (such as file, directory basename or any 
  // user defined name).
  // The display name MAY be different than the actual resource basename.
  // This field is only useful for informational purposes.
  string display_name = 4;
}

// The state of the share.
enum ShareState {
  // The share is no longer valid, for example, the share expired.
  SHARE_STATE_INVALID = 0;
  // New shares MUST be created in the SHARE_STATE_PENDING state.
  // This state means the share is pending to be accepted or rejected
  // by the recipient of the share.
  SHARE_STATE_PENDING = 1;
  // The recipient of the share has accepted the share.
  SHARE_STATE_ACCEPTED = 2;
  // The recipient of the share has rejected the share.
  // Do not means the share is removed, the recipient MAY
  // change the state to accepted or pending.
  SHARE_STATE_REJECTED = 3;
}

// Uniquely identifies a share in the share provider.
// A share MUST be uniquely identify by four (4) elements:
// 1) The share provider id
// 2) The owner of the share
// 3) The resource id
// 4) The grantee for the share
// This 4-tuple MUST be unique.
// For example, owner Alice shares the resource /home/docs with id 
// home:1234 to an user named Bob. The 4-tuple will consist of
// 1) The share provider id = "user"
// 2) The owner of the share = "Alice"
// 3) The resource id = "home:1234"
// 4) The grantee for the share = Grantee("type" = "user", "" => "Bob")
message ShareKey {
  // REQUIRED.
  string share_provider_id = 1;
  // REQUIRED.
  string owner = 2;
  // REQUIRED.
  cs3.storageproviderv0alpha.ResourceId resource_id = 3;
  // REQUIRED.
  cs3.storageproviderv0alpha.Grantee grantee = 4;
}

// A share id identifies uniquely a 
// share in the share provider namespace.
// A ShareId MUST be unique inside the share provider.
message ShareId {
  // REQUIRED.
  // The id of the share provider (like user, group, ocm, ...)
  string share_provider_id = 1;
  // REQUIRED.
  // The internal id used by service implementor to
  // uniquely identity the share in the internal
  // implementation of the service.
  string opaque_id = 2;
}

// The mechanism to identify a share 
// in the share provider namespace. 
message ShareReference {
  // REQUIRED.
  // One of the specifications MUST be specified.
  oneof spec {
    // The id of the share.
    ShareId id = 1;
    // The combination of fields that
    // make the share unique.
    ShareKey key = 2;
  }
}

// A share grant specifies the share permissions
// for a grantee.
message ShareGrant {
  // REQUIRED.
  // The grantee of the grant.
  cs3.storageproviderv0alpha.Grantee grantee = 1;
  // REQUIRED.
  // The share permissions for the grant.
  SharePermissions permissions = 2;
}
