// CS3 StorageProvider API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.storageproviderv0alpha;

option csharp_namespace = "CS3.StorageProviderV0Alpha";
option go_package = "storageproviderv0alphapb";
option java_multiple_files = true;
option java_outer_classname = "ResourcesProto";
option java_package = "com.cs3.storageproviderv0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\StorageProviderV0Alpha";

import "cs3/types/types.proto";

// Represents the information of the storage provider.
message ProviderInfo {
  // OPTIONAL.
  // Opaque information (containing storage-specific information).
  // For example, additional metadata attached to the resource.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The storage provider id that will become part of the 
  // resource id.
  // For example, if the provider_id is "home", resources obtained
  // from this storage provider will have a resource id like "home:1234".
  string provider_id = 2;
  // REQUIRED.
  // The public path prefix this storage provider handles.
  // In Unix literature, the mount path.
  // For example, if the provider_path is "/home", resources obtained
  // from this storage provier will have a resource path lik "/home/docs".
  string provider_path = 3;
  // REQUIRED.
  // The address where the storage provider can be reached.
  // For example, tcp://localhost:1099.
  string address = 4;
  // OPTIONAL.
  // Information to describe the functionalities
  // offered by the storage provider. Meant to be read
  // by humans.
  string description = 5;
  // Represents the list of methods available 
  // on this storage provider.
  message Features {
    bool recycle_bin = 1; // all recycle methods will return CODE_UNIMPLEMENTED
    bool file_versions = 2; // ...
  }
  // REQUIRED.
  // List of available methods.
  Features features = 6;
}

// Represents the information (metadata) about
// a storage resource organized in a hierarchical namespace (file, directory/container, reference, symlink, ...).
message ResourceInfo {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The type of the resource (container, file, ...)
  // See the enum ResourceType for all possible types.
  ResourceType type = 2;
  // REQUIRED.
  // Opaque unique identifier of the resource.
  ResourceId id = 3;
  // REQUIRED.
  // The data checksum for the file resource.
  // For all other resources, the checksum is unset.
  ResourceChecksum checksum = 4;
  // REQUIRED.
  // As decribed in https://tools.ietf.org/html/rfc7232#section-2.3
  // For file resources, the etag must change if data or metadata changes.
  // For container types, the etag must change if etag of any of the (indirectly) contained resources change.
  // For reference types, the etag must change if etag of the target changes and the target is on the same storage provider.
  // In all other cases the etag does not change.
  string etag = 5;
  // REQUIRED.
  // As described in [RFC 2015](https://tools.ietf.org/html/rfc2045#page-7)
  string mime_type = 6;
  // REQUIRED.
  // Last modification time (mtime) of file or directory contents.
  // For reference types this is NOT the mtime of the target.
  cs3.types.Timestamp mtime = 7;
  // REQUIRED.
  // The path for the resource.
  // It MUST start with the slash character (/).
  string path = 8;
  // REQUIRED.
  // The set of permissions for the resource effective for the authenticated user.
  ResourcePermissions permission_set = 9;
  // REQUIRED.
  // The size of the resource in bytes (file size)
  // TODO(moscicki): This is undefined for container type.
  // Is the accounting recursive?, could it be set to 0 for directories if recursive not supported? use another field?
  // TODO(moscicki): This needs to be defined also for other types (such as a symlink to a directory or file)
  uint64 size = 10;
  // REQUIRED:
  // Identifier of the owner of the resource.
  string owner = 11;
  // OPTIONAL.
  // Additional metadata attached to the resource.
  // If resource type is RESOURCE_TYPE_REFERENCE it MUST
  // be specified.
  ExtraMetadata extra_metadata = 13;
}

// ExtraMetadata contains extra metadata
// attached to a resource. This message and the Opaque
// message differ in that Opaque allows service implementors
// to include any extra metadata in any format and most clients
// will ignore it. However, the ExtraMetadata message
// contains well defined fileds that clients MUST understand if 
// they are specified.
message ExtraMetadata {
  // REQUIRED if resource type is RESOURCE_TYPE_REFERENCE.
  // The target reference the resource points to.
  Reference target = 1;
  // TODO(moscicki): what fields can fit here? executable bit?
  // bool executable = 2;

}

// The available types of resources.
enum ResourceType {
  RESOURCE_TYPE_INVALID = 0;
  // The file type represents a type
  // that holds arbitrary data.
  // Service implementors usually map this type
  // to files (local filesystem) or objects
  // (Amazon S3).
  RESOURCE_TYPE_FILE = 1;
  // The container type represents a type
  // that can contain another types.
  // Service implementors usually map this type
  // to folders (local filesystem) or buckets
  // (Amazon S3).
  RESOURCE_TYPE_CONTAINER = 2;
  // This represents a reference type which points
  // to another resource where client MAY be redirected. 
  // Client SHOULD use the ResourceInfo.target 
  // reference for a subsequent call.
  RESOURCE_TYPE_REFERENCE = 3;
  // This represents a symbolic link type if the underlying
  // storage system supports it. 
  // Symlink target SHOULD NOT be interpreted by the clients. 
  RESOURCE_TYPE_SYMLINK = 4;
  // Internal resource type for some specific resources inside
  // a storage implementation.
  // For example, this type could be used to represent
  // a device file on a Linux filesystem.
  // Another example could be to represent an ongoing upload, 
  // where an hypothetically user interface could show a loading icon
  // on this type of resources until the upload operation is completed.
  // Internal resources SHOULD NOT be moved to a different storage
  // provider.
  RESOURCE_TYPE_INTERNAL = 5;
}

// The checksum to verify 
// the integrity of a resource.
message ResourceChecksum {
  // The type of checksum to use.
  enum Type {
    RESOURCE_CHECKSUM_TYPE_INVALID = 0;
    // unset means no checksum is set.
    RESOURCE_CHECKSUM_TYPE_UNSET = 1;
    // Use Adler32 checksum.
    RESOURCE_CHECKSUM_TYPE_ADLER32 = 2;
    // Use MD5 checksum.
    RESOURCE_CHECKSUM_TYPE_MD5 = 3;
    // Use SHA-1 checksum.
    RESOURCE_CHECKSUM_TYPE_SHA1 = 4;
  }
  // REQUIRED.
  // The type of checksum to use.
  // If no checksum is provided,
  // type MUST be CHECKSUM_TYPE_UNSET.
  Type type = 1;
  // MUST be specified if type is not
  // CHECKSUM_TYPE_UNSET or type is not
  // CHECKSUM_TYPE_INVALID.
  // MUST be the hexadecimal representation of the cheksum.
  // The value is case-insensitive, so
  // "1E603A8", "1e603a8" or "1e603A8" are the same.
  string sum = 2;
}

// The mechanism to identify a resource 
// in the storage provider namespace. 
message Reference {
  // REQUIRED.
  // One of the specifications MUST be specified.
  oneof spec {
    // The path to the resource.
    // MUST start with the slash character (/).
    string path = 1;
    // The id for the resource.
    // MUST NOT start with the slash character (/).
    ResourceId id = 2;
  }
}

// A resource id identifies uniquely a 
// resource in the storage provider namespace.
// A ResourceId MUST be unique in the storage provider. 
message ResourceId {
  // REQUIRED.
  // The storage id of the storage provider.
  string storage_id = 1;
  // REQUIRED.
  // The internal id used by service implementor to
  // uniquely identity the resource in the internal
  // implementation of the service.
  string opaque_id = 2;
}

// The representation of permissions attached to a resource.
message ResourcePermissions {
  bool add_grant = 1;
  bool create_container = 2;
  bool delete = 3;
  bool get_path = 5;
  bool get_quota = 6;
  bool initiate_file_download = 7;
  bool initiate_file_upload = 8;
  bool list_grants = 9;
  bool list_container = 10;
  bool list_file_versions = 11;
  bool list_recycle = 12;
  bool move = 13;
  bool remove_grant = 14;
  bool purge_recycle = 15;
  bool restore_file_version = 16;
  bool restore_recycle_item = 17;
  bool stat = 18;
  bool update_grant = 19;
}

// A grant grants permissions
// to a resource to a grantee.
message Grant {
  // REQUIRED.
  // The grantee of the grant.
  Grantee grantee = 1;
  // REQUIRED.
  // The permissions for the grant.
  ResourcePermissions permissions = 2;
}

// A grantee is the receiver of grant.
message Grantee {
  // REQUIRED.
  // The type of the grantee.
  GranteeType type = 1;
  // The unique id for the grantee.
  // For example, a group name, user name or uuid.
  string id = 2;
}

// The type of the grantee.
enum GranteeType {
  GRANTEE_TYPE_INVALID = 0;
  // This type represents an individual.
  GRANTEE_TYPE_USER = 1;
  // This type represents a group of individuals.
  GRANTEE_TYPE_GROUP = 2;
}

// The information for a file version.
// TODO(labkode): make size and mtime OPTIONAL?
message FileVersion {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // MUST the specified.
  // The key to identify the version.
  string key = 3;
  // REQUIRED.
  // The size in bytes of the file version.
  uint64 size = 4;
  // REQUIRED.
  // The Unix Epoch timestamp in seconds.
  uint64 mtime = 5;
}

// A recycle item represents the information
// of a deleted resource.
message RecycleItem {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The type of the resource.
  ResourceType type = 2;
  // REQUIRED.
  // The key to identify the deleted resource.
  string key = 3;
  // REQUIRED.
  // The original path of the deleted resource.
  string path = 4;
  // OPTIONAL.
  // The size of the deleted resource.
  uint64 size = 5;
  // REQUIRED.
  // The deletion time of the resource
  // in Unix Epoch timestamp in seconds.
  Timestamp deletion_time = 6;
}
